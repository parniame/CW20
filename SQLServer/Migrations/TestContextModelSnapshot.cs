// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLServer;

#nullable disable

namespace DataAccess.SQLServer.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Discount");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasColumnName("ShopID");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct", (string)null);
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price1")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasColumnName("ShopID");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.ShopProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("ShopId")
                        .HasColumnType("int")
                        .HasColumnName("ShopID");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopProduct", (string)null);
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Discount", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Discount_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Order", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("DataAccess.SQLServer.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Shops");

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.OrderProduct", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderProduct_Orders");

                    b.HasOne("DataAccess.SQLServer.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderProduct_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Price", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Price_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Seller", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Shop", "Shop")
                        .WithMany("Sellers")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Shops");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.ShopProduct", b =>
                {
                    b.HasOne("DataAccess.SQLServer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopProduct_Product");

                    b.HasOne("DataAccess.SQLServer.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_ShopProduct_Shops");

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("OrderProducts");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("DataAccess.SQLServer.Entities.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sellers");
                });
#pragma warning restore 612, 618
        }
    }
}
